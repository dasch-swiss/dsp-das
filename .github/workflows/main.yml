name: CI
env:
  node-version: 18.15.0

on:
  push:
  release:
    types: [published]

jobs:
  find-ignored-tests:
    name: Find ignored tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./find-ignored-tests.sh

  dsp-app-tests:
    name: DSP-APP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: browser-actions/setup-chrome@v1
      - run: npm install
      - run: npx nx run dsp-app:lint
      - run: npx nx run dsp-app:test:ci
        env:
          TZ: Europe/Zurich
      # - run: npx nx run dsp-app-e2e:e2e-ci

  dateadapter-tests:
    name: DateAdapter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run dateAdapter:lint
      - run: npx nx run dateAdapter:test:ci
      # - run: npx nx run dateAdaper-e2e:e2e-ci

  jdnconvertiblecalendar-tests:
    name: JDNConvertibleCalendar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run jdnconvertiblecalendar:lint
      - run: npx nx run jdnconvertiblecalendar:test:ci

  jdnconvertiblecalendardateadapter-tests:
    name: JDNConvertibleCalendarDateAdapter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run jdnconvertiblecalendardateadapter:lint
      - run: npx nx run jdnconvertiblecalendardateadapter:test:ci

  unit-tests:
    name: Run unit tests
    needs: [find-ignored-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run dsp-app:test:ci
        env:
          TZ: Europe/Zurich

  # e2e-tests:
  #   name: Run e2e tests
  #   needs: [find-ignored-tests]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout source
  #       uses: actions/checkout@v2
  #     - name: Set up Node.js ${{ env.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ env.node-version }}
  #     - name: Install dependencies
  #       run: npm install
  #     - name: Webdriver update
  #       run: npm run webdriver-update
  #     - name: Run the tests
  #       run: npm run test-e2e-protractor

  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run dsp-app:lint

  build:
    name: Build the app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npm run build-prod

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Get release please action
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: node
          package-name: DSP-APP
          changelog-types: '[
            {"type": "feat", "section": "Enhancements", "hidden": false },
            {"type": "fix", "section": "Bug Fixes", "hidden": false },
            {"type": "chore", "section": "Maintenance", "hidden": false },
            {"type": "refactor", "section": "Maintenance", "hidden": false },
            {"type": "style", "section": "Maintenance", "hidden": false },
            {"type": "docs", "section": "Documentation", "hidden": false }
            ]'

  # publish only on release
  publish:
    name: Publish to Dockerhub
    needs: [
      build,
      lint,
      # e2e-tests,
      unit-tests
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build and publish image
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          docker buildx create --use
          make docker-publish

  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

# build documentation
  docs-build-test:
    name: Docs Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
      - name: Run docs build
        run: make docs-build
