name: CI

on:
  push:
  release:
    types: [published]

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Build app in prod mode
        run: npm run build-prod
      - name: Find ignored tests
        run: ./find-ignored-tests.sh
      - name: Run unit tests
        run: npm run test-ci
        env:
          TZ: Europe/Zurich
      - name: Run e2e tests
        run: |
          npm run webdriver-update
          npm run test-e2e-protractor
      - name: Run lint
        run: npm run lint-ci

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: node
          package-name: DSP-APP
          changelog-types: '[{"type": "feat", "section": "Enhancements", "hidden": false }, {"type": "fix", "section": "Bug Fixes", "hidden": false }, {"type": "chore", "section": "Maintenance", "hidden": false }, {"type": "refactor", "section": "Maintenance", "hidden": false }, {"type": "docs", "section": "Documentation", "hidden": false }]'

  # publish only on release
  publish:
    name: Publish to Dockerhub
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 50
      - name: Build and publish image
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          make publish-dsp-app-image

  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

# build documentation
  docs-build-test:
    name: Docs Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
      - name: Disk Free
        run: |
          df -h
          docker system df
          docker system prune --all --force --volumes
          df -h
      - name: run docs build
        run: make docs-build
      - name: Disk Free After
        run: |
          df -h
          docker system df

  # deploy documentation only on release
  deploy-docs:
    name: Deploy docs (on release only)
    needs: [
      docs-build-test
    ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Deploy docs
        uses: mhausenblas/mkdocs-deploy-gh-pages@1.16
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REQUIREMENTS: docs/requirements.txt
      - name: Disk Free After
        run: |
          df -h
          docker system df
