name: CI

on:
  push:

jobs:

  dsp-app-tests:
    name: DSP-APP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: browser-actions/setup-chrome@v1
      - run: npm install
      - run: npx nx run dsp-app:lint
      - run: npx nx run dsp-app:test:ci
        env:
          TZ: Europe/Zurich
      # - run: npx nx run dsp-app-e2e:e2e-ci

  dateadapter-tests:
    name: DateAdapter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run dateAdapter:lint
      - run: npx nx run dateAdapter:test:ci
      # - run: npx nx run dateAdaper-e2e:e2e-ci

  jdnconvertiblecalendar-tests:
    name: JDNConvertibleCalendar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run jdnconvertiblecalendar:lint
      - run: npx nx run jdnconvertiblecalendar:test:ci

  jdnconvertiblecalendardateadapter-tests:
    name: JDNConvertibleCalendarDateAdapter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npx nx run jdnconvertiblecalendardateadapter:lint
      - run: npx nx run jdnconvertiblecalendardateadapter:test:ci

  # publish on commit to main or tag
  publish:
    name: Publish to Dockerhub only on main or tag (release) commits
    needs: [
      dsp-app-tests,
      dateadapter-tests,
      jdnconvertiblecalendar-tests,
      jdnconvertiblecalendardateadapter-tests
    ]
    runs-on: ubuntu-latest
    # if: github.ref_name == 'main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - run: make docker-publish

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Get release please action
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: node
          package-name: DSP-APP
          changelog-types: '[
            {"type": "feat", "section": "Enhancements", "hidden": false },
            {"type": "fix", "section": "Bug Fixes", "hidden": false },
            {"type": "chore", "section": "Maintenance", "hidden": false },
            {"type": "refactor", "section": "Maintenance", "hidden": false },
            {"type": "style", "section": "Maintenance", "hidden": false },
            {"type": "docs", "section": "Documentation", "hidden": false }
            ]'

  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

# build documentation
  docs-build-test:
    name: Docs Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
      - name: Run docs build
        run: make docs-build
