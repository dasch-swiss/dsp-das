name: CI

on: [ push, fork ]

jobs:

  test:
    name: DSP-APP Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up Node
        uses: actions/setup-node@v6
        with:
          node-version: 22.12.0
      - name: Install dependencies
        run: npm install
      - name: Run linting
        run: npx nx run-many --all --target=lint --skip-nx-cache
      - name: Run tests with coverage
        run: npm run unit-test-coverage-ci
        env:
          TZ: Europe/Zurich
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: unit-test-coverage
          fail_ci_if_error: false

  dsp-app-e2e-tests:
    name: DSP-APP E2E
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v6
        with:
          node-version: 22.12.0
      - run: npm install
      - name: Install Cypress dependencies
        run: |
          cd ../dsp-das/apps/dsp-app/cypress
          npm install
      - name: Checkout DSP-API repo
        uses: actions/checkout@v3
        with:
          repository: dasch-swiss/dsp-api
          ref: main
          path: dsp-api
      - name: Start API
        run: |
          cd dsp-api
          make init-db-test
          docker compose -f docker-compose.yml up -d sipi ingest api
          ./webapi/scripts/wait-for-api.sh
      - name: Run e2e tests in CI
        if: github.event_name == 'push'
        run: |
          cd ../dsp-das
          npm run e2e-ci
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-snapshots
          path: apps/dsp-app/cypress/fixtures/screenshots
      - name: Check Docker Container Logs
        run: |
          docker ps
          docker ps -q | xargs -I {} docker logs {}


  jdnconvertiblecalendar-tests:
    name: JDNConvertibleCalendar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v6
        with:
          node-version: 22.12.0
      - run: npm install
      - run: npx nx run jdnconvertiblecalendar:lint
      - run: npx nx run jdnconvertiblecalendar:test:ci

  jdnconvertiblecalendardateadapter-tests:
    name: JDNConvertibleCalendarDateAdapter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v6
        with:
          node-version: 22.12.0
      - run: npm install
      - run: npx nx run jdnconvertiblecalendardateadapter:lint
      - run: npx nx run jdnconvertiblecalendardateadapter:test:ci

  vre-shared-app-config-tests:
    name: vre-core-config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - uses: actions/setup-node@v6
        with:
          node-version: 22.12.0
      - run: npm install
      - run: npx nx run vre-core-config:lint
      - run: npx nx run vre-core-config:test:ci

  check-openapi-sync:
    name: Check OpenAPI Spec is Up-to-Date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install yq for smart diff
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      - name: Run OpenAPI sync check
        run: ./scripts/check-openapi-sync.sh --verbose

  # publish on commit to main or tag
  publish:
    name: Publish to Dockerhub only on main or tag (release) commits
    needs: [
      # test,
      # dsp-app-tests,
      jdnconvertiblecalendar-tests,
      jdnconvertiblecalendardateadapter-tests,
      vre-shared-app-config-tests,
      check-openapi-sync
    ]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || startsWith(github.ref, 'refs/tags')
    outputs:
      tag: ${{ steps.output_docker_image_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets additionally all tags which we need
      - name: Output docker image tag
        id: output_docker_image_tag
        run: echo "tag=$(make docker-image-tag | tr -d '\n')" >> "$GITHUB_OUTPUT"
        shell: bash # Explicit for fail-fast behaviour
      - uses: actions/setup-node@v6
        with:
          node-version: 22.12.0
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - run: make docker-publish

  trigger-dev-deployment:
    name: Trigger deployment to DEV
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Trigger deployment to DEV
        env:
          IMAGE_TAG: ${{ needs.publish.outputs.tag }}
          JENKINS_BASIC_AUTH_USER: ${{ secrets.JENKINS_BASIC_AUTH_USER }}
          JENKINS_BASIC_AUTH_PASS: ${{ secrets.JENKINS_BASIC_AUTH_PASS }}
          JENKINS_DEV_WEBHOOK: ${{ secrets.JENKINS_DEV_WEBHOOK }}
        run: |
          curl -f -u "${JENKINS_BASIC_AUTH_USER}:${JENKINS_BASIC_AUTH_PASS}" \
               -X POST "${JENKINS_DEV_WEBHOOK}" \
               -d "Service=app&Version=${IMAGE_TAG}"

  send-chat-notification:
    name: Send google chat notification
    needs: [ publish ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Get release please action
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: node
          package-name: DSP-APP
          changelog-types: '[
            {"type": "feat", "section": "Enhancements"},
            {"type": "fix", "section": "Bug Fixes"},
            {"type": "chore", "section": "Maintenances"},
            {"type": "refactor", "section": "Maintenances"},
            {"type": "style", "section": "Maintenances"},
            {"type": "docs", "section": "Documentation"},
            {"type": "test", "section": "Tests"}
          ]'

  # build documentation
  docs-build-test:
    name: Docs Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v6
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
      - run: make docs-lint
      - run: make docs-build
