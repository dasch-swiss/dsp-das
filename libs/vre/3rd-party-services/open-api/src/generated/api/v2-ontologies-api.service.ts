/**
 * DSP-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { BadCredentialsException } from '../model/bad-credentials-exception';
// @ts-ignore
import { ForbiddenException } from '../model/forbidden-exception';
// @ts-ignore
import { GetV2Authentication400Response } from '../model/get-v2-authentication400-response';
// @ts-ignore
import { NotFoundException } from '../model/not-found-exception';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class V2OntologiesApiService {

    protected basePath = 'https://api.dev.dasch.swiss:443';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Delete the comment of a class definition.
     * @param resourceClassIri 
     * @param lastModificationDate 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV2OntologiesClassesCommentResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public deleteV2OntologiesClassesCommentResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteV2OntologiesClassesCommentResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteV2OntologiesClassesCommentResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (resourceClassIri === null || resourceClassIri === undefined) {
            throw new Error('Required parameter resourceClassIri was null or undefined when calling deleteV2OntologiesClassesCommentResourceclassiri.');
        }
        if (lastModificationDate === null || lastModificationDate === undefined) {
            throw new Error('Required parameter lastModificationDate was null or undefined when calling deleteV2OntologiesClassesCommentResourceclassiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (lastModificationDate !== undefined && lastModificationDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastModificationDate, 'lastModificationDate');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/classes/comment/${this.configuration.encodeParam({name: "resourceClassIri", value: resourceClassIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param resourceClassIri 
     * @param lastModificationDate 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV2OntologiesClassesResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public deleteV2OntologiesClassesResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteV2OntologiesClassesResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteV2OntologiesClassesResourceclassiri(resourceClassIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (resourceClassIri === null || resourceClassIri === undefined) {
            throw new Error('Required parameter resourceClassIri was null or undefined when calling deleteV2OntologiesClassesResourceclassiri.');
        }
        if (lastModificationDate === null || lastModificationDate === undefined) {
            throw new Error('Required parameter lastModificationDate was null or undefined when calling deleteV2OntologiesClassesResourceclassiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (lastModificationDate !== undefined && lastModificationDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastModificationDate, 'lastModificationDate');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/classes/${this.configuration.encodeParam({name: "resourceClassIri", value: resourceClassIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ontologyIri 
     * @param lastModificationDate 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV2OntologiesCommentOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public deleteV2OntologiesCommentOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteV2OntologiesCommentOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteV2OntologiesCommentOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (ontologyIri === null || ontologyIri === undefined) {
            throw new Error('Required parameter ontologyIri was null or undefined when calling deleteV2OntologiesCommentOntologyiri.');
        }
        if (lastModificationDate === null || lastModificationDate === undefined) {
            throw new Error('Required parameter lastModificationDate was null or undefined when calling deleteV2OntologiesCommentOntologyiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (lastModificationDate !== undefined && lastModificationDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastModificationDate, 'lastModificationDate');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/comment/${this.configuration.encodeParam({name: "ontologyIri", value: ontologyIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ontologyIri 
     * @param lastModificationDate 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV2OntologiesOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public deleteV2OntologiesOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteV2OntologiesOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteV2OntologiesOntologyiri(ontologyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (ontologyIri === null || ontologyIri === undefined) {
            throw new Error('Required parameter ontologyIri was null or undefined when calling deleteV2OntologiesOntologyiri.');
        }
        if (lastModificationDate === null || lastModificationDate === undefined) {
            throw new Error('Required parameter lastModificationDate was null or undefined when calling deleteV2OntologiesOntologyiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }
        if (lastModificationDate !== undefined && lastModificationDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastModificationDate, 'lastModificationDate');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/${this.configuration.encodeParam({name: "ontologyIri", value: ontologyIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param propertyIri 
     * @param lastModificationDate 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV2OntologiesPropertiesCommentPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public deleteV2OntologiesPropertiesCommentPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteV2OntologiesPropertiesCommentPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteV2OntologiesPropertiesCommentPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyIri === null || propertyIri === undefined) {
            throw new Error('Required parameter propertyIri was null or undefined when calling deleteV2OntologiesPropertiesCommentPropertyiri.');
        }
        if (lastModificationDate === null || lastModificationDate === undefined) {
            throw new Error('Required parameter lastModificationDate was null or undefined when calling deleteV2OntologiesPropertiesCommentPropertyiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (lastModificationDate !== undefined && lastModificationDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastModificationDate, 'lastModificationDate');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/properties/comment/${this.configuration.encodeParam({name: "propertyIri", value: propertyIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param propertyIri 
     * @param lastModificationDate 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteV2OntologiesPropertiesPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public deleteV2OntologiesPropertiesPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteV2OntologiesPropertiesPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteV2OntologiesPropertiesPropertyiri(propertyIri: string, lastModificationDate: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyIri === null || propertyIri === undefined) {
            throw new Error('Required parameter propertyIri was null or undefined when calling deleteV2OntologiesPropertiesPropertyiri.');
        }
        if (lastModificationDate === null || lastModificationDate === undefined) {
            throw new Error('Required parameter lastModificationDate was null or undefined when calling deleteV2OntologiesPropertiesPropertyiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }
        if (lastModificationDate !== undefined && lastModificationDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastModificationDate, 'lastModificationDate');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/properties/${this.configuration.encodeParam({name: "propertyIri", value: propertyIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This is the route used to dereference an actual ontology IRI. If the URL path looks like it belongs to a built-in API ontology (which has to contain \&quot;knora-api\&quot;), prefix it with http://api.knora.org to get the ontology IRI. Otherwise, if it looks like it belongs to a project-specific API ontology, prefix it with routeData.appConfig.externalOntologyIriHostAndPort to get the ontology IRI.
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param allLanguages 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOntology(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getOntology(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getOntology(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getOntology(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (allLanguages !== undefined && allLanguages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>allLanguages, 'allLanguages');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/ontology`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all entities of an ontology
     * @param ontologyIri 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param allLanguages 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesAllentitiesOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesAllentitiesOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesAllentitiesOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesAllentitiesOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (ontologyIri === null || ontologyIri === undefined) {
            throw new Error('Required parameter ontologyIri was null or undefined when calling getV2OntologiesAllentitiesOntologyiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (allLanguages !== undefined && allLanguages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>allLanguages, 'allLanguages');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/allentities/${this.configuration.encodeParam({name: "ontologyIri", value: ontologyIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param resourceClassIri 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesCandeleteclassResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesCandeleteclassResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesCandeleteclassResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesCandeleteclassResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (resourceClassIri === null || resourceClassIri === undefined) {
            throw new Error('Required parameter resourceClassIri was null or undefined when calling getV2OntologiesCandeleteclassResourceclassiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/candeleteclass/${this.configuration.encodeParam({name: "resourceClassIri", value: resourceClassIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ontologyIri 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesCandeleteontologyOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesCandeleteontologyOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesCandeleteontologyOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesCandeleteontologyOntologyiri(ontologyIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (ontologyIri === null || ontologyIri === undefined) {
            throw new Error('Required parameter ontologyIri was null or undefined when calling getV2OntologiesCandeleteontologyOntologyiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/candeleteontology/${this.configuration.encodeParam({name: "ontologyIri", value: ontologyIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * If only a class IRI is provided, this endpoint checks if any cardinality of any of the class properties can be replaced. If a property IRI and a new cardinality are provided, it checks if the cardinality can be set for the property on the specific class. Fails if not both a property IRI and a new cardinality is provided. Fails if the user does not have write access to the ontology of the class.
     * @param resourceClassIri 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param propertyIri 
     * @param newCardinality The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesCanreplacecardinalitiesResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, propertyIri?: string, newCardinality?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesCanreplacecardinalitiesResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, propertyIri?: string, newCardinality?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesCanreplacecardinalitiesResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, propertyIri?: string, newCardinality?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesCanreplacecardinalitiesResourceclassiri(resourceClassIri: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, propertyIri?: string, newCardinality?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (resourceClassIri === null || resourceClassIri === undefined) {
            throw new Error('Required parameter resourceClassIri was null or undefined when calling getV2OntologiesCanreplacecardinalitiesResourceclassiri.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyIri !== undefined && propertyIri !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyIri, 'propertyIri');
        }
        if (newCardinality !== undefined && newCardinality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>newCardinality, 'newCardinality');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/canreplacecardinalities/${this.configuration.encodeParam({name: "resourceClassIri", value: resourceClassIri, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param allLanguages 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesClasses(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesClasses(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesClasses(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesClasses(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (allLanguages !== undefined && allLanguages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>allLanguages, 'allLanguages');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/classes`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the metadata of an ontology
     * @param xKnoraAcceptProject 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesMetadata(xKnoraAcceptProject?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesMetadata(xKnoraAcceptProject?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesMetadata(xKnoraAcceptProject?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesMetadata(xKnoraAcceptProject?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptProject !== undefined && xKnoraAcceptProject !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-project', String(xKnoraAcceptProject));
        }
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/metadata`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param allLanguages 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2OntologiesProperties(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public getV2OntologiesProperties(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getV2OntologiesProperties(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getV2OntologiesProperties(knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, allLanguages?: boolean, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (allLanguages !== undefined && allLanguages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>allLanguages, 'allLanguages');
        }
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/properties`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public patchV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public patchV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public patchV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchV2OntologiesCardinalities.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/cardinalities`;
        return this.httpClient.request<string>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV2Ontologies(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public postV2Ontologies(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public postV2Ontologies(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public postV2Ontologies(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postV2Ontologies.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV2OntologiesCandeletecardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public postV2OntologiesCandeletecardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public postV2OntologiesCandeletecardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public postV2OntologiesCandeletecardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postV2OntologiesCandeletecardinalities.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/candeletecardinalities`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add cardinalities to a class. For more info check out the &lt;a href&#x3D;\&quot;https://docs.dasch.swiss/knora-api-v2/ontologies.html#add-cardinalities-to-a-class\&quot;&gt;documentation&lt;/a&gt;.
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public postV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public postV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public postV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postV2OntologiesCardinalities.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/cardinalities`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new class
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public postV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public postV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public postV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postV2OntologiesClasses.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/classes`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public postV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public postV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public postV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postV2OntologiesProperties.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/properties`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public putV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public putV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public putV2OntologiesCardinalities(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putV2OntologiesCardinalities.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/cardinalities`;
        return this.httpClient.request<string>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change the labels or comments of a class
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public putV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public putV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public putV2OntologiesClasses(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putV2OntologiesClasses.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/classes`;
        return this.httpClient.request<string>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putV2OntologiesGuiorder(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public putV2OntologiesGuiorder(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public putV2OntologiesGuiorder(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public putV2OntologiesGuiorder(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putV2OntologiesGuiorder.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/guiorder`;
        return this.httpClient.request<string>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change the metadata of an ontology
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putV2OntologiesMetadata(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public putV2OntologiesMetadata(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public putV2OntologiesMetadata(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public putV2OntologiesMetadata(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putV2OntologiesMetadata.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/metadata`;
        return this.httpClient.request<string>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public putV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public putV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public putV2OntologiesProperties(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putV2OntologiesProperties.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/properties`;
        return this.httpClient.request<string>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param body 
     * @param knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999 
     * @param xKnoraAcceptSchema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param schema The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
     * @param xKnoraJsonLdRendering The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
     * @param markup The markup rendering to be used for the request (XML or standoff).
     * @param xKnoraAcceptMarkup The markup rendering to be used for the request (XML or standoff).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putV2OntologiesPropertiesGuielement(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<string>;
    public putV2OntologiesPropertiesGuielement(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public putV2OntologiesPropertiesGuielement(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public putV2OntologiesPropertiesGuielement(body: string, knoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999?: string, xKnoraAcceptSchema?: string, schema?: string, xKnoraJsonLdRendering?: string, markup?: string, xKnoraAcceptMarkup?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putV2OntologiesPropertiesGuielement.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (schema !== undefined && schema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>schema, 'schema');
        }
        if (markup !== undefined && markup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>markup, 'markup');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xKnoraAcceptSchema !== undefined && xKnoraAcceptSchema !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-schema', String(xKnoraAcceptSchema));
        }
        if (xKnoraJsonLdRendering !== undefined && xKnoraJsonLdRendering !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-json-ld-rendering', String(xKnoraJsonLdRendering));
        }
        if (xKnoraAcceptMarkup !== undefined && xKnoraAcceptMarkup !== null) {
            localVarHeaders = localVarHeaders.set('x-knora-accept-markup', String(xKnoraAcceptMarkup));
        }

        let localVarCredential: string | undefined;
        // authentication (httpAuth1) required
        localVarCredential = this.configuration.lookupCredential('httpAuth1');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        // authentication (httpAuth) required
        localVarCredential = this.configuration.lookupCredential('httpAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v2/ontologies/properties/guielement`;
        return this.httpClient.request<string>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: body,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
