openapi: 3.1.0
info:
  title: DSP-API
  version: v32.4.0-9-g0217ee4
  summary: DSP-API is part of the the DaSCH Service Platform, a repository for the
    long-term preservation and reuse of data in the humanities.
  contact:
    name: DaSCH
    url: https://www.dasch.swiss/
servers:
- url: https://api.dev.dasch.swiss:443
  description: The dsp-api server
paths:
  /admin/files/{projectShortcode}/{filename}:
    get:
      tags:
      - Admin API
      description: Returns the permission code and the project's restricted view settings
        for a given shortcode and filename.
      operationId: getAdminFilesProjectshortcodeFilename
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: filename
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionCodeAndProjectRestrictedViewSettings'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups:
    get:
      tags:
      - Admin API
      description: Return all groups.
      operationId: getAdminGroups
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsGetResponseADM'
              example:
                groups:
                - id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin API
      description: '**Required permissions**: User must SystemAdmin or ProjectAdmin
        of the project the group is created in.'
      operationId: Create new group
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
            example:
              name: NewGroup
              descriptions:
              - value: NewGroup description in English
                language: en
              - value: NewGroup Beschreibung auf Deutsch
                language: de
              project: http://rdfh.ch/projects/0042
              status: true
              selfjoin: false
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups/{groupIri}:
    get:
      tags:
      - Admin API
      description: Return a single group identified by its IRI.
      operationId: getAdminGroupsGroupiri
      parameters:
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - Admin API
      description: Update a group's basic information.
      operationId: putAdminGroupsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
            example:
              name: NewGroupNewName
              descriptions:
              - value: NewGroupNewName description in English
                language: en
              - value: NewGroupNewName Beschreibung auf Deutsch
                language: de
              status: false
              selfjoin: true
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      description: Deletes a group by changing its status to 'false'.
      operationId: deleteAdminGroupsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups/{groupIri}/members:
    get:
      tags:
      - Admin API
      description: Return all members of a single group.
      operationId: getAdminGroupsGroupiriMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembersGetResponseADM'
              example:
                members:
                - id: http://rdfh.ch/users/0001
                  username: username
                  email: user@exampl.com
                  givenName: Jane
                  familyName: Doe
                  status: true
                  lang: rm
                  groups:
                  - id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                    name: NewGroup
                    descriptions:
                    - value: NewGroup description in English
                      language: en
                    - value: NewGroup Beschreibung auf Deutsch
                      language: de
                    project:
                      id: http://rdfh.ch/projects/0042
                      shortname: example
                      shortcode: '0001'
                      longname: Example Project
                      description:
                      - value: An example project
                        language: en
                      keywords:
                      - example
                      - project
                      ontologies: []
                      status: true
                      selfjoin: false
                      allowedCopyrightHolders: []
                      enabledLicenses:
                      - http://rdfh.ch/licenses/boris
                      - http://rdfh.ch/licenses/cc-by-nd-4.0
                      - http://rdfh.ch/licenses/open-licence-2.0
                      - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                      - http://rdfh.ch/licenses/public-domain
                      - http://rdfh.ch/licenses/unknown
                      - http://rdfh.ch/licenses/ai-generated
                      - http://rdfh.ch/licenses/cc-by-4.0
                      - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                      - http://rdfh.ch/licenses/cc-pdm-1.0
                      - http://rdfh.ch/licenses/cc-0-1.0
                      - http://rdfh.ch/licenses/cc-by-nc-4.0
                      - http://rdfh.ch/licenses/cc-by-sa-4.0
                    status: true
                    selfjoin: false
                  projects:
                  - id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  permissions:
                    groupsPerProject: {}
                    administrativePermissionsPerProject: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups/{groupIri}/status:
    put:
      tags:
      - Admin API
      description: Updates a group's status.
      operationId: putAdminGroupsGroupiriStatus
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupStatusUpdateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                    allowedCopyrightHolders: []
                    enabledLicenses:
                    - http://rdfh.ch/licenses/boris
                    - http://rdfh.ch/licenses/cc-by-nd-4.0
                    - http://rdfh.ch/licenses/open-licence-2.0
                    - http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                    - http://rdfh.ch/licenses/public-domain
                    - http://rdfh.ch/licenses/unknown
                    - http://rdfh.ch/licenses/ai-generated
                    - http://rdfh.ch/licenses/cc-by-4.0
                    - http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                    - http://rdfh.ch/licenses/cc-pdm-1.0
                    - http://rdfh.ch/licenses/cc-0-1.0
                    - http://rdfh.ch/licenses/cc-by-nc-4.0
                    - http://rdfh.ch/licenses/cc-by-sa-4.0
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists:
    get:
      tags:
      - Admin API
      description: Get all lists or all lists belonging to a project. Note that you
        can provide either a project IRI or a project shortcode.
      operationId: getAdminLists
      parameters:
      - name: projectIri
        in: query
        description: The (optional) IRI of the project.
        required: false
        schema:
          type: string
        example: http://rdfh.ch/projects/0042
      - name: projectShortcode
        in: query
        description: The (optional) shortcode of the project.
        required: false
        schema:
          type: string
        example: '0042'
      responses:
        '200':
          description: Contains the list of all root nodes of each found list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin API
      description: Creates a new list by creating the root node of the list.
      operationId: postAdminLists
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreateRootNodeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}:
    get:
      tags:
      - Admin API
      description: Returns a list node, root or child, with children (if exist).
      operationId: getAdminListsP1
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - Admin API
      operationId: putAdminListsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - Admin API
      description: Creates a new list node as a child of the specified list node.
      operationId: postAdminListsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreateChildNodeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildNodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      operationId: deleteAdminListsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemDeleteResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/info:
    get:
      tags:
      - Admin API
      description: Returns basic information about a list node, root or child, w/o
        children (if exist).
      operationId: getAdminListsP1Info
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/lists/infos/{p1}:
    get:
      tags:
      - Admin API
      description: '*Deprecated*. Use GET admin/lists/<listIri>/info instead. Returns
        basic information about a list node, root or child, w/o children (if exist).'
      operationId: getAdminListsInfosP1
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      deprecated: true
  /admin/lists/nodes/{p1}:
    get:
      tags:
      - Admin API
      description: '*Deprecated*. Use GET admin/lists/<listIri>/info instead. Returns
        basic information about a list node, root or child, w/o children (if exist).'
      operationId: getAdminListsNodesP1
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      deprecated: true
  /admin/lists/candelete/{p1}:
    get:
      tags:
      - Admin API
      description: Checks if a list can be deleted (none of its nodes is used in data).
      operationId: getAdminListsCandeleteP1
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanDeleteListResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/lists/{p1}/name:
    put:
      tags:
      - Admin API
      operationId: putAdminListsP1Name
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeNameRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/labels:
    put:
      tags:
      - Admin API
      operationId: putAdminListsP1Labels
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeLabelsRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/comments:
    put:
      tags:
      - Admin API
      operationId: putAdminListsP1Comments
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeCommentsRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/position:
    put:
      tags:
      - Admin API
      operationId: putAdminListsP1Position
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangePositionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePositionChangeResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/comments/{p1}:
    delete:
      tags:
      - Admin API
      operationId: deleteAdminListsCommentsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodeCommentsDeleteResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/maintenance/{action-name}:
    post:
      tags:
      - Admin API
      operationId: postAdminMaintenanceAction-name
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: action-name
        in: path
        description: |
          The name of the maintenance action to be executed.
          Maintenance actions are executed asynchronously in the background.
        required: true
        schema:
          type: string
        example: fix-top-left
      requestBody:
        description: |
          The optional parameters as json for the maintenance action.
          May be required by certain actions.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        '202':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/ap:
    post:
      tags:
      - Admin API
      description: Create a new administrative permission
      operationId: postAdminPermissionsAp
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdministrativePermissionAPIRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativePermissionCreateResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/ap/{projectIri}:
    get:
      tags:
      - Admin API
      description: Get all administrative permissions for a project.
      operationId: getAdminPermissionsApProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativePermissionsForProjectGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/ap/{projectIri}/{groupIri}:
    get:
      tags:
      - Admin API
      description: Get all administrative permissions for a project and a group.
      operationId: getAdminPermissionsApProjectiriGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativePermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/doap/{projectIri}:
    get:
      tags:
      - Admin API
      description: Get all default object access permissions for a project.
      operationId: getAdminPermissionsDoapProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionsForProjectGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{projectIri}:
    get:
      tags:
      - Admin API
      description: Get all permissions for a project.
      operationId: getAdminPermissionsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsForProjectGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/doap/{permissionIri}:
    put:
      tags:
      - Admin API
      description: Update an existing default object access permission. The request
        may update the hasPermission and/or any allowed combination of group, resource
        class and property for the permission.
      operationId: putAdminPermissionsDoapPermissioniri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        description: Default object access permissions can be only for group, resource
          class, property or both resource class and property.If an invalid combination
          is provided, the request will fail with a Bad Request response.The iris
          for resource class and property must be valid Api V2 complex iris.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeDoapRequest'
            examples:
              For a group:
                value:
                  forGroup: http://www.knora.org/ontology/knora-admin#ProjectMember
              For a resource class and a property:
                value:
                  forResourceClass: http://api.dasch.swiss/ontology/0803/incunabula/v2#bild
                  forProperty: http://api.dasch.swiss/ontology/0803/incunabula/v2#pagenum
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/group:
    put:
      tags:
      - Admin API
      description: Update a permission's group
      operationId: putAdminPermissionsPermissioniriGroup
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionGroupApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/hasPermissions:
    put:
      tags:
      - Admin API
      description: Update a permission's set of hasPermissions
      operationId: putAdminPermissionsPermissioniriHaspermissions
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionHasPermissionsApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/property:
    put:
      tags:
      - Admin API
      description: Update a DAOP's property. Use `PUT /admin/permissions/doap/{permissionIri}`
        instead.
      operationId: putAdminPermissionsPermissioniriProperty
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionPropertyApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      deprecated: true
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/resourceClass:
    put:
      tags:
      - Admin API
      description: Update a DOAP's resource class. Use `PUT /admin/permissions/doap/{permissionIri}`
        instead.
      operationId: putAdminPermissionsPermissioniriResourceclass
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionResourceClassApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      deprecated: true
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}:
    delete:
      tags:
      - Admin API
      description: Delete an permission.
      operationId: deleteAdminPermissionsPermissioniri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDeleteResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/doap:
    post:
      tags:
      - Admin API
      description: Create a new default object access permission
      operationId: postAdminPermissionsDoap
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDefaultObjectAccessPermissionAPIRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionCreateResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/legal-info/licenses:
    get:
      tags:
      - Admin API
      description: Get the available licenses for use within this project.
      operationId: getAdminProjectsShortcodeProjectshortcodeLegal-infoLicenses
      parameters:
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: page
        in: query
        description: The number of the desired page to be returned.
        required: false
        schema:
          default: 1
          type: integer
          format: int32
          minimum: 1
      - name: page-size
        in: query
        description: The number of items per page to be returned.
        required: false
        schema:
          default: 25
          type: integer
          format: int32
          minimum: 1
          maximum: 100
      - name: filter
        in: query
        description: Filter the results.
        required: false
        schema:
          type: string
      - name: order
        in: query
        description: Sort the results in ascending (asc) or descending (desc) order.
        required: false
        schema:
          default: Asc
          type: string
      - name: showOnlyEnabled
        in: query
        description: Show only enabled licenses if true.
        required: false
        schema:
          default: false
          type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse_ProjectLicenseDto'
              example:
                data:
                - id: http://rdfh.ch/licenses/cc-by-4.0
                  uri: https://creativecommons.org/licenses/by/4.0/
                  labelEn: CC BY 4.0
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-by-sa-4.0
                  uri: https://creativecommons.org/licenses/by-sa/4.0/
                  labelEn: CC BY-SA 4.0
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-by-nc-4.0
                  uri: https://creativecommons.org/licenses/by-nc/4.0/
                  labelEn: CC BY-NC 4.0
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-by-nc-sa-4.0
                  uri: https://creativecommons.org/licenses/by-nc-sa/4.0/
                  labelEn: CC BY-NC-SA 4.0
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-by-nd-4.0
                  uri: https://creativecommons.org/licenses/by-nd/4.0/
                  labelEn: CC BY-ND 4.0
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-by-nc-nd-4.0
                  uri: https://creativecommons.org/licenses/by-nc-nd/4.0/
                  labelEn: CC BY-NC-ND 4.0
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/ai-generated
                  uri: http://rdfh.ch/licenses/ai-generated
                  labelEn: AI-Generated Content - Not Protected by Copyright
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/unknown
                  uri: http://rdfh.ch/licenses/unknown
                  labelEn: Unknown License - Ask Copyright Holder for Permission
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/public-domain
                  uri: http://rdfh.ch/licenses/public-domain
                  labelEn: Public Domain - Not Protected by Copyright
                  isRecommended: true
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-0-1.0
                  uri: https://creativecommons.org/publicdomain/zero/1.0/
                  labelEn: CC0 1.0
                  isRecommended: false
                  isEnabled: true
                - id: http://rdfh.ch/licenses/cc-pdm-1.0
                  uri: https://creativecommons.org/publicdomain/mark/1.0/
                  labelEn: CC PDM 1.0
                  isRecommended: false
                  isEnabled: true
                - id: http://rdfh.ch/licenses/boris
                  uri: https://www.ub.unibe.ch/services/open_science/boris_publications/index_eng.html#collapse_pane631832
                  labelEn: BORIS Standard License
                  isRecommended: false
                  isEnabled: true
                - id: http://rdfh.ch/licenses/open-licence-2.0
                  uri: https://www.etalab.gouv.fr/wp-content/uploads/2018/11/open-licence.pdf
                  labelEn: LICENCE OUVERTE 2.0
                  isRecommended: false
                  isEnabled: true
                pagination:
                  pageSize: 13
                  totalItems: 13
                  totalPages: 1
                  currentPage: 1
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/shortcode/{projectShortcode}/legal-info/licenses/{licenseIri}:
    get:
      tags:
      - Admin API
      description: Get a specific license by its IRI for use within this project.
      operationId: getAdminProjectsShortcodeProjectshortcodeLegal-infoLicensesLicenseiri
      parameters:
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: licenseIri
        in: path
        description: The IRI of the license. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/licenses/cc-by-nc-4.0
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLicenseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/shortcode/{projectShortcode}/legal-info/authorships:
    get:
      tags:
      - Admin API
      description: Get the allowed authorships for use within this project. The user
        must be project member, project admin or system admin.
      operationId: getAdminProjectsShortcodeProjectshortcodeLegal-infoAuthorships
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: page
        in: query
        description: The number of the desired page to be returned.
        required: false
        schema:
          default: 1
          type: integer
          format: int32
          minimum: 1
      - name: page-size
        in: query
        description: The number of items per page to be returned.
        required: false
        schema:
          default: 25
          type: integer
          format: int32
          minimum: 1
          maximum: 100
      - name: filter
        in: query
        description: Filter the results.
        required: false
        schema:
          type: string
      - name: order
        in: query
        description: Sort the results in ascending (asc) or descending (desc) order.
        required: false
        schema:
          default: Asc
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse_Authorship'
              example:
                data:
                - Lotte Reiniger
                - Margaret J. Winkler
                - Hilma af Klint
                pagination:
                  pageSize: 3
                  totalItems: 15
                  totalPages: 5
                  currentPage: 1
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/legal-info/licenses/{licenseIri}/enable:
    put:
      tags:
      - Admin API
      description: Enable a license for use within this project. The user must be
        project admin or system admin.
      operationId: putAdminProjectsShortcodeProjectshortcodeLegal-infoLicensesLicenseiriEnable
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: licenseIri
        in: path
        description: The IRI of the license. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/licenses/cc-by-nc-4.0
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/legal-info/licenses/{licenseIri}/disable:
    put:
      tags:
      - Admin API
      description: Disable a license for use within this project. The user must be
        project admin or system admin.
      operationId: putAdminProjectsShortcodeProjectshortcodeLegal-infoLicensesLicenseiriDisable
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: licenseIri
        in: path
        description: The IRI of the license. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/licenses/cc-by-nc-4.0
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/legal-info/copyright-holders:
    get:
      tags:
      - Admin API
      description: Get the allowed copyright holders for use within this project.
        The user must be project member, project admin or system admin.
      operationId: getAdminProjectsShortcodeProjectshortcodeLegal-infoCopyright-holders
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: page
        in: query
        description: The number of the desired page to be returned.
        required: false
        schema:
          default: 1
          type: integer
          format: int32
          minimum: 1
      - name: page-size
        in: query
        description: The number of items per page to be returned.
        required: false
        schema:
          default: 25
          type: integer
          format: int32
          minimum: 1
          maximum: 100
      - name: filter
        in: query
        description: Filter the results.
        required: false
        schema:
          type: string
      - name: order
        in: query
        description: Sort the results in ascending (asc) or descending (desc) order.
        required: false
        schema:
          default: Asc
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse_CopyrightHolder'
              example:
                data:
                - DaSCH
                - University of Zurich
                pagination:
                  pageSize: 2
                  totalItems: 10
                  totalPages: 5
                  currentPage: 1
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    put:
      tags:
      - Admin API
      description: Update a particular allowed copyright holder for use within this
        project, does not update existing values on assets. The user must be a system
        admin.
      operationId: putAdminProjectsShortcodeProjectshortcodeLegal-infoCopyright-holders
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyrightHolderReplaceRequest'
            example:
              old-value: DaSch
              new-value: DaSCH
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - Admin API
      description: Add new allowed copyright holders for use within this project.
        The user must be a system or project admin.
      operationId: postAdminProjectsShortcodeProjectshortcodeLegal-infoCopyright-holders
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyrightHolderAddRequest'
            example:
              data:
              - DaSCH
              - University of Zurich
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects:
    get:
      tags:
      - Admin API
      description: Returns all projects.
      operationId: getAdminProjects
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin API
      description: Creates a new project.
      operationId: postAdminProjects
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        description: The property `enabledLicenses` is optional. If not provided,
          the DaSCH recommended licenses will be used. The property `allowedCopyrightHolders`
          is optional. The copyright holder for AI generated values and unknown authorship
          will be added in any case.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/Keywords:
    get:
      tags:
      - Admin API
      description: Returns all unique keywords for all projects as a list.
      operationId: getAdminProjectsKeywords
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsKeywordsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/iri/{projectIri}:
    get:
      tags:
      - Admin API
      description: Returns a single project identified by the IRI.
      operationId: getAdminProjectsIriProjectiri
      parameters:
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - Admin API
      description: Updates a project identified by the IRI.
      operationId: putAdminProjectsIriProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      description: Deletes a project identified by the IRI.
      operationId: deleteAdminProjectsIriProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}:
    get:
      tags:
      - Admin API
      description: Returns a single project identified by the shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcode
      parameters:
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/shortname/{projectShortname}:
    get:
      tags:
      - Admin API
      description: Returns a single project identified by the shortname.
      operationId: getAdminProjectsShortnameProjectshortname
      parameters:
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/iri/{projectIri}/Keywords:
    get:
      tags:
      - Admin API
      description: Returns all keywords for a single project.
      operationId: getAdminProjectsIriProjectiriKeywords
      parameters:
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectKeywordsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/iri/{projectIri}/RestrictedViewSettings:
    get:
      tags:
      - Admin API
      description: Returns the project's restricted view settings identified by the
        IRI.
      operationId: getAdminProjectsIriProjectiriRestrictedviewsettings
      parameters:
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRestrictedViewSettingsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin API
      description: Sets the project's restricted view settings identified by the IRI.
      operationId: postAdminProjectsIriProjectiriRestrictedviewsettings
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      requestBody:
        description: |-
          Set how all still image resources of a projects should be displayed when viewed as restricted.
          This can be either a size restriction or a watermark.
          For that, we support two of the (IIIF size)[https://iiif.io/api/image/3.0/#42-size] forms:
          * `!d,d` The returned image is scaled so that the width and height of the returned image are not greater than d, while maintaining the aspect ratio.
          * `pct:n` The width and height of the returned image is scaled to n percent of the width and height of the original image. 1<= n <= 100.

          If the watermark is set to `true`, the returned image will be watermarked, otherwise the default size !128,128 is set.

          It is only possible to set either the size or the watermark, not both at the same time.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRestrictedViewRequest'
            example:
              size: '!128,128'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedViewResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/RestrictedViewSettings:
    get:
      tags:
      - Admin API
      description: Returns the project's restricted view settings identified by the
        shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcodeRestrictedviewsettings
      parameters:
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRestrictedViewSettingsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin API
      description: Sets the project's restricted view settings identified by the shortcode.
      operationId: postAdminProjectsShortcodeProjectshortcodeRestrictedviewsettings
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      requestBody:
        description: |-
          Set how all still image resources of a projects should be displayed when viewed as restricted.
          This can be either a size restriction or a watermark.
          For that, we support two of the (IIIF size)[https://iiif.io/api/image/3.0/#42-size] forms:
          * `!d,d` The returned image is scaled so that the width and height of the returned image are not greater than d, while maintaining the aspect ratio.
          * `pct:n` The width and height of the returned image is scaled to n percent of the width and height of the original image. 1<= n <= 100.

          If the watermark is set to `true`, the returned image will be watermarked, otherwise the default size !128,128 is set.

          It is only possible to set either the size or the watermark, not both at the same time.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRestrictedViewRequest'
            example:
              size: '!128,128'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedViewResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortname/{projectShortname}/RestrictedViewSettings:
    get:
      tags:
      - Admin API
      description: Returns the project's restricted view settings identified by the
        shortname.
      operationId: getAdminProjectsShortnameProjectshortnameRestrictedviewsettings
      parameters:
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRestrictedViewSettingsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/iri/{projectIri}/AllData:
    get:
      tags:
      - Admin API
      description: Returns all ontologies, data, and configuration belonging to a
        project identified by the IRI.
      operationId: getAdminProjectsIriProjectiriAlldata
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          headers:
            Content-Disposition:
              required: true
              schema:
                type: string
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}/members:
    get:
      tags:
      - Admin API
      description: Returns all project members of a project identified by the IRI.
      operationId: getAdminProjectsIriProjectiriMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/members:
    get:
      tags:
      - Admin API
      description: Returns all project members of a project identified by the shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcodeMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortname/{projectShortname}/members:
    get:
      tags:
      - Admin API
      description: Returns all project members of a project identified by the shortname.
      operationId: getAdminProjectsShortnameProjectshortnameMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}/admin-members:
    get:
      tags:
      - Admin API
      operationId: getAdminProjectsIriProjectiriAdmin-members
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAdminMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/admin-members:
    get:
      tags:
      - Admin API
      description: Returns all admin members of a project identified by the shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcodeAdmin-members
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAdminMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortname/{projectShortname}/admin-members:
    get:
      tags:
      - Admin API
      description: Returns all admin members of a project identified by the shortname.
      operationId: getAdminProjectsShortnameProjectshortnameAdmin-members
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAdminMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/erase:
    delete:
      tags:
      - Admin API
      description: |-
        !ATTENTION! Erase a project with the given shortcode.
        This will permanently and irrecoverably remove the project and all of its assets.
        Authorization: Requires system admin permissions.
        Only available if the feature has been configured on the server side.
      operationId: deleteAdminProjectsShortcodeProjectshortcodeErase
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: keepAssets
        in: query
        description: If set to true the assets in ingest will not be removed.
        required: false
        schema:
          default: false
          type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/export:
    get:
      tags:
      - Admin API
      description: Lists existing exports of all projects.
      operationId: getAdminProjectsExport
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectExportInfoResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/export:
    post:
      tags:
      - Admin API
      description: Trigger an export of a project identified by the shortcode.
      operationId: postAdminProjectsShortcodeProjectshortcodeExport
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '202':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/export-await:
    post:
      tags:
      - Admin API
      description: Trigger an export of a project identified by the shortcode.Returns
        the shortcode and the export location when the process has finished successfully.
      operationId: postAdminProjectsShortcodeProjectshortcodeExport-await
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectExportInfoResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/import:
    post:
      tags:
      - Admin API
      description: Trigger an import of a project identified by the shortcode.
      operationId: postAdminProjectsShortcodeProjectshortcodeImport
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectImportResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/project-memberships:
    get:
      tags:
      - Admin API
      description: Returns the user's project memberships for a user identified by
        their IRI.
      operationId: getAdminUsersIriUseririProject-memberships
      parameters:
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectMembershipsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users/iri/{userIri}/project-admin-memberships:
    get:
      tags:
      - Admin API
      description: Returns the user's project admin memberships for a user identified
        by their IRI.
      operationId: getAdminUsersIriUseririProject-admin-memberships
      parameters:
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectAdminMembershipsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users/iri/{userIri}/group-memberships:
    get:
      tags:
      - Admin API
      description: Returns the user's group memberships for a user identified by their
        IRI.
      operationId: getAdminUsersIriUseririGroup-memberships
      parameters:
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupMembershipsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users:
    get:
      tags:
      - Admin API
      description: Returns all users.
      operationId: getAdminUsers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - Admin API
      description: Create a new user.
      operationId: postAdminUsers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}:
    get:
      tags:
      - Admin API
      description: Returns a user identified by their IRI.
      operationId: getAdminUsersIriUseriri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      description: Delete a user identified by IRI (change status to false).
      operationId: deleteAdminUsersIriUseriri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/email/{email}:
    get:
      tags:
      - Admin API
      description: Returns a user identified by their Email.
      operationId: getAdminUsersEmailEmail
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: email
        in: path
        description: The user email. Must be URL-encoded.
        required: true
        schema:
          type: string
          pattern: ^.+@.+$
        example: jane@example.com
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/username/{username}:
    get:
      tags:
      - Admin API
      description: Returns a user identified by their Username.
      operationId: getAdminUsersUsernameUsername
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: username
        in: path
        description: The user name. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: JaneDoe
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/project-memberships/{projectIri}:
    post:
      tags:
      - Admin API
      description: Add a user to a project identified by IRI.
      operationId: postAdminUsersIriUseririProject-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      description: Remove a user from a project membership identified by IRI.
      operationId: deleteAdminUsersIriUseririProject-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/project-admin-memberships/{projectIri}:
    post:
      tags:
      - Admin API
      description: Add a user as an admin to a project identified by IRI.
      operationId: postAdminUsersIriUseririProject-admin-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      description: Remove a user form an admin project membership identified by IRI.
      operationId: deleteAdminUsersIriUseririProject-admin-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/group-memberships/{groupIri}:
    post:
      tags:
      - Admin API
      description: Add a user to a group identified by IRI.
      operationId: postAdminUsersIriUseririGroup-membershipsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin API
      description: Remove a user form an group membership identified by IRI.
      operationId: deleteAdminUsersIriUseririGroup-membershipsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/BasicUserInformation:
    put:
      tags:
      - Admin API
      description: Update a user's basic information identified by IRI.
      operationId: putAdminUsersIriUseririBasicuserinformation
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicUserInformationChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/Password:
    put:
      tags:
      - Admin API
      description: Change a user's password identified by IRI.
      operationId: putAdminUsersIriUseririPassword
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/Status:
    put:
      tags:
      - Admin API
      description: Change a user's status identified by IRI.
      operationId: putAdminUsersIriUseririStatus
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/SystemAdmin:
    put:
      tags:
      - Admin API
      description: Change a user's SystemAdmin status identified by IRI.
      operationId: putAdminUsersIriUseririSystemadmin
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/DO4MiUDbSvKfxs1GLYxLjA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAdminChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/authentication:
    get:
      tags:
      - API v2
      operationId: getV2Authentication
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - API v2
      operationId: postV2Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
        required: true
      responses:
        '200':
          description: ''
          headers:
            Set-Cookie:
              required: false
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    delete:
      tags:
      - API v2
      operationId: deleteV2Authentication
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Set-Cookie:
              required: false
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - {}
      - httpAuth: []
  /v2/login:
    get:
      tags:
      - API v2
      operationId: getV2Login
      responses:
        '200':
          description: ''
          content:
            text/html:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - API v2
      operationId: postV2Login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginForm'
        required: true
      responses:
        '200':
          description: ''
          headers:
            Set-Cookie:
              required: false
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /v2/lists/{listIri}:
    get:
      tags:
      - API v2
      description: Returns a list (a graph with all list nodes).
      operationId: getV2ListsListiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: listIri
        in: path
        description: The iri to a list.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/lists/0001/alNZf76JQIG2IgWBkeYR3A
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/node/{listIri}:
    get:
      tags:
      - API v2
      description: Returns a list node.
      operationId: getV2NodeListiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: listIri
        in: path
        description: The iri to a list.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/lists/0001/alNZf76JQIG2IgWBkeYR3A
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/info:
    get:
      tags:
      - API v2
      operationId: getV2ResourcesInfo
      parameters:
      - name: x-knora-accept-project
        in: header
        required: true
        schema:
          type: string
      - name: resourceClass
        in: query
        required: true
        schema:
          type: string
      - name: order
        in: query
        description: Sort the results in ascending (asc) or descending (desc) order.
        required: false
        schema:
          default: Asc
          type: string
      - name: orderBy
        in: query
        description: Sort the results by the specified property.
        required: false
        schema:
          default: LastModificationDate
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /v2/values/{resourceIri}/{valueUuid}:
    get:
      tags:
      - API v2
      description: Find detailed documentation on <a href="https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/">docs.dasch.swiss</a>.
      operationId: getV2ValuesResourceiriValueuuid
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        description: The IRI of a Resource.
        required: true
        schema:
          type: string
      - name: valueUuid
        in: path
        description: The UUID of a Value.
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/values:
    put:
      tags:
      - API v2
      description: Find detailed documentation on <a href="https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/">docs.dasch.swiss</a>.
      operationId: putV2Values
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example:
              '@id': http://rdfh.ch/0001/a-thing
              '@type': anything:Thing
              anything:hasInteger:
                '@id': http://rdfh.ch/0001/a-thing/values/vp96riPIRnmQcbMhgpv_Rg
                '@type': knora-api:IntValue
                knora-api:intValueAsInt: 5
              '@context':
                knora-api: http://api.knora.org/ontology/knora-api/v2#
                anything: http://0.0.0.0:3333/ontology/0001/anything/v2#
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - API v2
      description: Find detailed documentation on <a href="https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/">docs.dasch.swiss</a>.
      operationId: postV2Values
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example:
              '@id': http://rdfh.ch/0001/a-thing
              '@type': anything:Thing
              anything:hasInteger:
                '@type': knora-api:IntValue
                knora-api:intValueAsInt: 4
              '@context':
                knora-api: http://api.knora.org/ontology/knora-api/v2#
                anything: http://0.0.0.0:3333/ontology/0001/anything/v2#
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/values/delete:
    post:
      tags:
      - API v2
      description: Find detailed documentation on <a href="https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/">docs.dasch.swiss</a>.
      operationId: postV2ValuesDelete
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example:
              '@id': http://rdfh.ch/0001/a-thing
              '@type': anything:Thing
              anything:hasInteger:
                '@id': http://rdfh.ch/0001/a-thing/values/vp96riPIRnmQcbMhgpv_Rg
                '@type': knora-api:IntValue
              '@context':
                knora-api: http://api.knora.org/ontology/knora-api/v2#
                anything: http://0.0.0.0:3333/ontology/0001/anything/v2#
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/values/erase:
    post:
      tags:
      - API v2
      description: Erase a Value and all of its old versions from the database completely.
        Find detailed documentation on <a href="https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/">docs.dasch.swiss</a>.
      operationId: postV2ValuesErase
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example:
              '@id': http://rdfh.ch/0001/a-thing
              '@type': anything:Thing
              anything:hasInteger:
                '@id': http://rdfh.ch/0001/a-thing/values/vp96riPIRnmQcbMhgpv_Rg
                '@type': knora-api:IntValue
              '@context':
                knora-api: http://api.knora.org/ontology/knora-api/v2#
                anything: http://0.0.0.0:3333/ontology/0001/anything/v2#
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/values/erasehistory:
    post:
      tags:
      - API v2
      description: Erase all old versions of a Value from the database completely
        and keep only the latest version. Find detailed documentation on <a href="https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/">docs.dasch.swiss</a>.
      operationId: postV2ValuesErasehistory
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example:
              '@id': http://rdfh.ch/0001/a-thing
              '@type': anything:Thing
              anything:hasInteger:
                '@id': http://rdfh.ch/0001/a-thing/values/vp96riPIRnmQcbMhgpv_Rg
                '@type': knora-api:IntValue
              '@context':
                knora-api: http://api.knora.org/ontology/knora-api/v2#
                anything: http://0.0.0.0:3333/ontology/0001/anything/v2#
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/candelete:
    get:
      tags:
      - API v2
      operationId: getV2ResourcesCandelete
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: jsonLd
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/graph/{resourceIri}:
    get:
      tags:
      - API v2
      operationId: getV2GraphResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: depth
        in: query
        required: false
        schema:
          default: 4
          type: integer
          format: int32
          minimum: 1
          maximum: 10
      - name: direction
        in: query
        required: false
        schema:
          default: outbound
          type: string
      - name: excludeProperty
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/iiifmanifest/{resourceIri}:
    get:
      tags:
      - API v2
      operationId: getV2ResourcesIiifmanifestResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resourcespreview:
    get:
      tags:
      - API v2
      operationId: getV2Resourcespreview
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/projectHistoryEvents/{projectIri}:
    get:
      tags:
      - API v2
      operationId: getV2ResourcesProjecthistoryeventsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/resourceHistoryEvents/{resourceIri}:
    get:
      tags:
      - API v2
      operationId: getV2ResourcesResourcehistoryeventsResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/history/{resourceIri}:
    get:
      tags:
      - API v2
      operationId: getV2ResourcesHistoryResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: startDate
        in: query
        required: false
        schema:
          type: string
      - name: start date
        in: query
        required: false
        schema:
          type: string
      - name: endDate
        in: query
        required: false
        schema:
          type: string
      - name: end date
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources:
    get:
      tags:
      - API v2
      operationId: getV2Resources
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceClass
        in: query
        required: true
        schema:
          type: string
      - name: orderByProperty
        in: query
        required: false
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
          minimum: 0
      - name: x-knora-accept-project
        in: header
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    put:
      tags:
      - API v2
      operationId: putV2Resources
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - API v2
      operationId: postV2Resources
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/tei/{resourceIri}:
    get:
      tags:
      - API v2
      operationId: getV2TeiResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        required: true
        schema:
          type: string
      - name: mappingIri
        in: query
        required: false
        schema:
          type: string
      - name: textProperty
        in: query
        required: true
        schema:
          type: string
      - name: gravsearchTemplateIri
        in: query
        required: false
        schema:
          type: string
      - name: headerXSLTIri
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/erase:
    post:
      tags:
      - API v2
      operationId: postV2ResourcesErase
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/resources/delete:
    post:
      tags:
      - API v2
      operationId: postV2ResourcesDelete
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/mapping:
    post:
      tags:
      - API v2
      operationId: postV2Mapping
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateStandoffMappingForm'
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/metadata/projects/{projectShortcode}/resources:
    get:
      tags:
      - API v2
      description: Get metadata of all resources in a project. The metadata is returned
        with complex schema IRIs in the payload. This endpoint is only available for
        system and project admins.
      operationId: getV2MetadataProjectsProjectshortcodeResources
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: format
        in: query
        description: The format of the response.
        required: false
        schema:
          $ref: '#/components/schemas/ExportFormat'
      - name: classIris
        in: query
        description: List of resource class IRIs to filter the resources. If not present,
          all resources of the project will be returned.
        required: false
        schema:
          default: []
          type: array
          items:
            type: string
      responses:
        '200':
          description: Depending on the format the response will be rendered as CSV,TSV,JSON.
            The example is CSV.
          headers:
            Content-Type:
              description: 'The content type of the response, depends on the format:
                CSV => text/csv, TSV => text/tab-separated-values, JSON => application/json'
              required: true
              schema:
                type: string
            Content-Disposition:
              description: Will be set to attachment. The filename contains project
                shortcode, export timestamp and the format.
              required: true
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
              example: |2-

                Resource IRI,ARK URL (Permalink),Resource Class,Label,Created by,Creation Date,Last Modification Date (if available),Deletion Date (if available)
                http://rdfh.ch/0803/00014b43f902,http://0.0.0.0:3336/ark:/72163/1/0803/00014b43f902l,http://0.0.0.0:3333/ontology/0803/incunabula/v2#page,t8r,http://rdfh.ch/users/91e19f1e01,2016-03-02T15:05:37Z,,
                http://rdfh.ch/0803/0015627fe303,http://0.0.0.0:3336/ark:/72163/1/0803/0015627fe303e,http://0.0.0.0:3333/ontology/0803/incunabula/v2#page,m8v,http://rdfh.ch/users/91e19f1e01,2016-03-02T15:05:49Z,,
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/search/{searchTerm}:
    get:
      tags:
      - API v2
      description: Search for resources by label.
      operationId: getV2SearchSearchterm
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: searchTerm
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: offset
        in: query
        description: The offset to be used for paging.
        required: false
        schema:
          default: 0
          type: integer
          format: int32
          exclusiveMinimum: -1
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      - name: limitToResourceClass
        in: query
        description: The resource class to limit the search to.
        required: false
        schema:
          type: string
      - name: limitToStandoffClass
        in: query
        description: The standoff class to limit the search to.
        required: false
        schema:
          type: string
      - name: returnFiles
        in: query
        description: Whether to return files in the search results.
        required: false
        schema:
          default: false
          type: boolean
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/search/count/{searchTerm}:
    get:
      tags:
      - API v2
      description: Search for resources by label.
      operationId: getV2SearchCountSearchterm
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: searchTerm
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      - name: limitToResourceClass
        in: query
        description: The resource class to limit the search to.
        required: false
        schema:
          type: string
      - name: limitToStandoffClass
        in: query
        description: The standoff class to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchbylabel/{searchTerm}:
    get:
      tags:
      - API v2
      description: Search for resources by label.
      operationId: getV2SearchbylabelSearchterm
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: searchTerm
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: offset
        in: query
        description: The offset to be used for paging.
        required: false
        schema:
          default: 0
          type: integer
          format: int32
          exclusiveMinimum: -1
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      - name: limitToResourceClass
        in: query
        description: The resource class to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchbylabel/count/{searchTerm}:
    get:
      tags:
      - API v2
      description: Search for resources by label.
      operationId: getV2SearchbylabelCountSearchterm
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: searchTerm
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      - name: limitToResourceClass
        in: query
        description: The resource class to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchextended:
    post:
      tags:
      - API v2
      description: Search for resources using a Gravsearch query.
      operationId: postV2Searchextended
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      requestBody:
        description: The Gravsearch query. See https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/query-language/
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchextended/{p1}:
    get:
      tags:
      - API v2
      description: Search for resources using a Gravsearch query.
      operationId: getV2SearchextendedP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The Gravsearch query. See https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/query-language/
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchextended/count:
    post:
      tags:
      - API v2
      description: Count resources using a Gravsearch query.
      operationId: postV2SearchextendedCount
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      requestBody:
        description: The Gravsearch query. See https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/query-language/
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchextended/count/{p1}:
    get:
      tags:
      - API v2
      description: Count resources using a Gravsearch query.
      operationId: getV2SearchextendedCountP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The Gravsearch query. See https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/query-language/
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchIncomingLinks/{resourceIri}:
    get:
      tags:
      - API v2
      description: Search for incoming links using a Gravsearch query with an offset.
      operationId: getV2SearchincominglinksResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        description: The IRI of the resource to retrieve
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset to be used for paging.
        required: false
        schema:
          default: 0
          type: integer
          format: int32
          exclusiveMinimum: -1
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchStillImageRepresentations/{resourceIri}:
    get:
      tags:
      - API v2
      description: Search for StillImageRepresentations using a Gravsearch query with
        an offset.
      operationId: getV2SearchstillimagerepresentationsResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        description: The IRI of the resource to retrieve
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset to be used for paging.
        required: false
        schema:
          default: 0
          type: integer
          format: int32
          exclusiveMinimum: -1
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchStillImageRepresentationsCount/{resourceIri}:
    get:
      tags:
      - API v2
      description: Count SearchStillImageRepresentations using a Gravsearch query.
      operationId: getV2SearchstillimagerepresentationscountResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        description: The IRI of the resource to retrieve
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/searchIncomingRegions/{resourceIri}:
    get:
      tags:
      - API v2
      description: Search for incoming regions using a Gravsearch query with an offset.
      operationId: getV2SearchincomingregionsResourceiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceIri
        in: path
        description: The IRI of the resource to retrieve
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: The offset to be used for paging.
        required: false
        schema:
          default: 0
          type: integer
          format: int32
          exclusiveMinimum: -1
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: limitToProject
        in: query
        description: The project to limit the search to.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/metadata:
    get:
      tags:
      - API v2
      description: Get the metadata of an ontology
      operationId: getV2OntologiesMetadata
      parameters:
      - name: x-knora-accept-project
        in: header
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - API v2
      description: Change the metadata of an ontology
      operationId: putV2OntologiesMetadata
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /ontology:
    get:
      tags:
      - API v2
      description: This is the route used to dereference an actual ontology IRI. If
        the URL path looks like it belongs to a built-in API ontology (which has to
        contain "knora-api"), prefix it with http://api.knora.org to get the ontology
        IRI. Otherwise, if it looks like it belongs to a project-specific API ontology,
        prefix it with routeData.appConfig.externalOntologyIriHostAndPort to get the
        ontology IRI.
      operationId: getOntology
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: allLanguages
        in: query
        required: false
        schema:
          default: false
          type: boolean
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/allentities/{ontologyIri}:
    get:
      tags:
      - API v2
      description: Get all entities of an ontology
      operationId: getV2OntologiesAllentitiesOntologyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: ontologyIri
        in: path
        required: true
        schema:
          type: string
      - name: allLanguages
        in: query
        required: false
        schema:
          default: false
          type: boolean
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/canreplacecardinalities/{resourceClassIri}:
    get:
      tags:
      - API v2
      description: If only a class IRI is provided, this endpoint checks if any cardinality
        of any of the class properties can be replaced. If a property IRI and a new
        cardinality are provided, it checks if the cardinality can be set for the
        property on the specific class. Fails if not both a property IRI and a new
        cardinality is provided. Fails if the user does not have write access to the
        ontology of the class.
      operationId: getV2OntologiesCanreplacecardinalitiesResourceclassiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceClassIri
        in: path
        required: true
        schema:
          type: string
      - name: propertyIri
        in: query
        required: false
        schema:
          type: string
      - name: newCardinality
        in: query
        description: 'The new cardinality to be set for the property, must be provided
          when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1'
        required: false
        schema:
          type: string
        example: 1-n
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/classes/{classIri}:
    get:
      tags:
      - API v2
      operationId: getV2OntologiesClassesClassiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: classIri
        in: path
        required: true
        schema:
          type: string
      - name: allLanguages
        in: query
        required: false
        schema:
          default: false
          type: boolean
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/candeleteclass/{resourceClassIri}:
    get:
      tags:
      - API v2
      operationId: getV2OntologiesCandeleteclassResourceclassiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceClassIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/properties/{propertyIri}:
    get:
      tags:
      - API v2
      operationId: getV2OntologiesPropertiesPropertyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: propertyIri
        in: path
        required: true
        schema:
          type: string
      - name: allLanguages
        in: query
        required: false
        schema:
          default: false
          type: boolean
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - API v2
      operationId: deleteV2OntologiesPropertiesPropertyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: propertyIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: lastModificationDate
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/candeleteproperty/{propertyIri}:
    get:
      tags:
      - API v2
      operationId: getV2OntologiesCandeletepropertyPropertyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: propertyIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/candeleteontology/{ontologyIri}:
    get:
      tags:
      - API v2
      operationId: getV2OntologiesCandeleteontologyOntologyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: ontologyIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/classes/comment/{resourceClassIri}:
    delete:
      tags:
      - API v2
      description: Delete the comment of a class definition.
      operationId: deleteV2OntologiesClassesCommentResourceclassiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceClassIri
        in: path
        required: true
        schema:
          type: string
      - name: lastModificationDate
        in: query
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/classes/{resourceClassIri}:
    delete:
      tags:
      - API v2
      operationId: deleteV2OntologiesClassesResourceclassiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: resourceClassIri
        in: path
        required: true
        schema:
          type: string
      - name: lastModificationDate
        in: query
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/comment/{ontologyIri}:
    delete:
      tags:
      - API v2
      operationId: deleteV2OntologiesCommentOntologyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: ontologyIri
        in: path
        required: true
        schema:
          type: string
      - name: lastModificationDate
        in: query
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/properties/comment/{propertyIri}:
    delete:
      tags:
      - API v2
      operationId: deleteV2OntologiesPropertiesCommentPropertyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: propertyIri
        in: path
        required: true
        schema:
          type: string
      - name: lastModificationDate
        in: query
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/{ontologyIri}:
    delete:
      tags:
      - API v2
      operationId: deleteV2OntologiesOntologyiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: ontologyIri
        in: path
        required: true
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: lastModificationDate
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/cardinalities:
    put:
      tags:
      - API v2
      operationId: putV2OntologiesCardinalities
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - API v2
      description: Add cardinalities to a class. For more info check out the <a href="https://docs.dasch.swiss/knora-api-v2/ontologies.html#add-cardinalities-to-a-class">documentation</a>.
      operationId: postV2OntologiesCardinalities
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    patch:
      tags:
      - API v2
      operationId: patchV2OntologiesCardinalities
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/classes:
    put:
      tags:
      - API v2
      description: Change the labels or comments of a class
      operationId: putV2OntologiesClasses
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - API v2
      description: Create a new class
      operationId: postV2OntologiesClasses
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/candeletecardinalities:
    post:
      tags:
      - API v2
      operationId: postV2OntologiesCandeletecardinalities
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/properties:
    put:
      tags:
      - API v2
      operationId: putV2OntologiesProperties
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - API v2
      operationId: postV2OntologiesProperties
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies:
    post:
      tags:
      - API v2
      operationId: postV2Ontologies
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/guiorder:
    put:
      tags:
      - API v2
      operationId: putV2OntologiesGuiorder
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /v2/ontologies/properties/guielement:
    put:
      tags:
      - API v2
      operationId: putV2OntologiesPropertiesGuielement
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      - name: x-knora-accept-schema
        in: header
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: schema
        in: query
        description: |-
          The ontology schema to be used for the request.
          If not specified, the default schema ApiV2Complex will be used.
        required: false
        schema:
          type: string
      - name: x-knora-json-ld-rendering
        in: header
        description: |-
          The JSON-LD rendering to be used for the request (flat or hierarchical).
          If not specified, hierarchical JSON-LD will be used.
        required: false
        schema:
          type: string
      - name: markup
        in: query
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      - name: x-knora-accept-markup
        in: header
        description: The markup rendering to be used for the request (XML or standoff).
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          headers:
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/ld+json:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
            application/trig:
              schema:
                type: string
            application/rdf+xml:
              schema:
                type: string
            application/n-quads:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /version:
    get:
      tags:
      - Management API
      operationId: getVersion
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
              example:
                webapi: v32.4.0-9-g0217ee4
                buildCommit: 0217ee4f8
                buildTime: '2025-10-16T11:29:17.037131113Z'
                fuseki: 5.5.0-2
                scala: 3.3.7
                sipi: v3.16.3
                name: version
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /health:
    get:
      tags:
      - Management API
      operationId: getHealth
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /start-compaction:
    post:
      tags:
      - Management API
      operationId: postStart-compaction
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMV3C4ZDBONRWQLTTO5UXG4Z2GQ2DG999
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /shacl/validate:
    post:
      tags:
      - Shacl API
      description: foo
      operationId: postShaclValidate
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ValidationFormData'
        required: true
      responses:
        '200':
          description: |2

            The validation report in Turtle format.

            ```turtle
            @prefix sh:      <http://www.w3.org/ns/shacl#> .
            @prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

            [ rdf:type     sh:ValidationReport;
              sh:conforms  true
            ] .
            ```
          content:
            text/turtle:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/OntologyConstraintException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/GravsearchException'
                - $ref: '#/components/schemas/EditConflictException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
components:
  schemas:
    Active:
      title: Active
      type: object
    AdministrativePermissionADM:
      title: AdministrativePermissionADM
      type: object
      required:
      - iri
      - forProject
      - forGroup
      properties:
        iri:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    AdministrativePermissionCreateResponseADM:
      title: AdministrativePermissionCreateResponseADM
      type: object
      required:
      - administrativePermission
      properties:
        administrativePermission:
          $ref: '#/components/schemas/AdministrativePermissionADM'
    AdministrativePermissionGetResponseADM:
      title: AdministrativePermissionGetResponseADM
      type: object
      required:
      - administrativePermission
      properties:
        administrativePermission:
          $ref: '#/components/schemas/AdministrativePermissionADM'
    AdministrativePermissionsForProjectGetResponseADM:
      title: AdministrativePermissionsForProjectGetResponseADM
      type: object
      properties:
        administrativePermissions:
          type: array
          items:
            $ref: '#/components/schemas/AdministrativePermissionADM'
    BadCredentialsException:
      title: BadCredentialsException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    BadRequestException:
      title: BadRequestException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    BasicUserInformationChangeRequest:
      title: BasicUserInformationChangeRequest
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        email:
          type: string
          pattern: ^.+@.+$
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        lang:
          $ref: '#/components/schemas/LanguageCode'
    CanDeleteListResponseADM:
      title: CanDeleteListResponseADM
      type: object
      required:
      - listIri
      - canDeleteList
      properties:
        listIri:
          type: string
        canDeleteList:
          type: boolean
    CanJoin:
      title: CanJoin
      type: object
    CannotJoin:
      title: CannotJoin
      type: object
    ChangeDoapRequest:
      title: ChangeDoapRequest
      type: object
      properties:
        forGroup:
          type: string
        forResourceClass:
          type: string
        forProperty:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    ChangePermissionGroupApiRequestADM:
      title: ChangePermissionGroupApiRequestADM
      type: object
      required:
      - forGroup
      properties:
        forGroup:
          type: string
    ChangePermissionHasPermissionsApiRequestADM:
      title: ChangePermissionHasPermissionsApiRequestADM
      type: object
      properties:
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    ChangePermissionPropertyApiRequestADM:
      title: ChangePermissionPropertyApiRequestADM
      type: object
      required:
      - forProperty
      properties:
        forProperty:
          type: string
    ChangePermissionResourceClassApiRequestADM:
      title: ChangePermissionResourceClassApiRequestADM
      type: object
      required:
      - forResourceClass
      properties:
        forResourceClass:
          type: string
    CheckResponse:
      title: CheckResponse
      type: object
      required:
      - message
      properties:
        message:
          type: string
    ChildNodeDeleteResponseADM:
      title: ChildNodeDeleteResponseADM
      type: object
      required:
      - node
      properties:
        node:
          $ref: '#/components/schemas/ListNodeADM'
    ChildNodeInfoGetResponseADM:
      title: ChildNodeInfoGetResponseADM
      type: object
      required:
      - nodeinfo
      properties:
        nodeinfo:
          $ref: '#/components/schemas/ListChildNodeInfoADM'
    Comments:
      title: Comments
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    CopyrightHolderAddRequest:
      title: CopyrightHolderAddRequest
      type: object
      properties:
        data:
          type: array
          uniqueItems: true
          items:
            type: string
    CopyrightHolderReplaceRequest:
      title: CopyrightHolderReplaceRequest
      type: object
      required:
      - old-value
      - new-value
      properties:
        old-value:
          type: string
        new-value:
          type: string
    CreateAdministrativePermissionAPIRequestADM:
      title: CreateAdministrativePermissionAPIRequestADM
      type: object
      required:
      - forProject
      - forGroup
      properties:
        id:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    CreateDefaultObjectAccessPermissionAPIRequestADM:
      title: CreateDefaultObjectAccessPermissionAPIRequestADM
      type: object
      required:
      - forProject
      properties:
        id:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        forResourceClass:
          type: string
        forProperty:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    CreateStandoffMappingForm:
      title: CreateStandoffMappingForm
      type: object
      required:
      - json
      - xml
      properties:
        json:
          type: string
        xml:
          type: string
    DE:
      title: DE
      type: object
    DefaultObjectAccessPermissionADM:
      title: DefaultObjectAccessPermissionADM
      type: object
      required:
      - iri
      - forProject
      properties:
        iri:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        forResourceClass:
          type: string
        forProperty:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    DefaultObjectAccessPermissionCreateResponseADM:
      title: DefaultObjectAccessPermissionCreateResponseADM
      type: object
      required:
      - defaultObjectAccessPermission
      properties:
        defaultObjectAccessPermission:
          $ref: '#/components/schemas/DefaultObjectAccessPermissionADM'
    DefaultObjectAccessPermissionGetResponseADM:
      title: DefaultObjectAccessPermissionGetResponseADM
      type: object
      required:
      - defaultObjectAccessPermission
      properties:
        defaultObjectAccessPermission:
          $ref: '#/components/schemas/DefaultObjectAccessPermissionADM'
    DefaultObjectAccessPermissionsForProjectGetResponseADM:
      title: DefaultObjectAccessPermissionsForProjectGetResponseADM
      type: object
      properties:
        defaultObjectAccessPermissions:
          type: array
          items:
            $ref: '#/components/schemas/DefaultObjectAccessPermissionADM'
    Description:
      title: Description
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/StringLiteralV2'
    DuplicateValueException:
      title: DuplicateValueException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    EN:
      title: EN
      type: object
    EditConflictException:
      title: EditConflictException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    EmailPassword:
      title: EmailPassword
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          pattern: ^.+@.+$
        password:
          type: string
    ExportFormat:
      title: ExportFormat
      default: CSV
      type: string
      enum:
      - CSV
      - JSON
      - TSV
    FR:
      title: FR
      type: object
    FamilyName:
      title: FamilyName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ForbiddenException:
      title: ForbiddenException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    GivenName:
      title: GivenName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    GravsearchException:
      title: GravsearchException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    Group:
      title: Group
      type: object
      required:
      - id
      - name
      - status
      - selfjoin
      properties:
        id:
          type: string
        name:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
        project:
          $ref: '#/components/schemas/Project'
        status:
          type: boolean
        selfjoin:
          type: boolean
    GroupCreateRequest:
      title: GroupCreateRequest
      type: object
      required:
      - name
      - descriptions
      - project
      - status
      - selfjoin
      properties:
        id:
          $ref: '#/components/schemas/GroupIri'
        name:
          $ref: '#/components/schemas/GroupName'
        descriptions:
          $ref: '#/components/schemas/GroupDescriptions'
        project:
          $ref: '#/components/schemas/ProjectIri'
        status:
          $ref: '#/components/schemas/GroupStatus'
        selfjoin:
          $ref: '#/components/schemas/GroupSelfJoin'
    GroupDescriptions:
      title: GroupDescriptions
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    GroupGetResponseADM:
      title: GroupGetResponseADM
      type: object
      required:
      - group
      properties:
        group:
          $ref: '#/components/schemas/Group'
    GroupIri:
      title: GroupIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    GroupMembersGetResponseADM:
      title: GroupMembersGetResponseADM
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
    GroupName:
      title: GroupName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    GroupSelfJoin:
      title: GroupSelfJoin
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    GroupStatus:
      title: GroupStatus
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    GroupStatusUpdateRequest:
      title: GroupStatusUpdateRequest
      type: object
      required:
      - status
      properties:
        status:
          $ref: '#/components/schemas/GroupStatus'
    GroupUpdateRequest:
      title: GroupUpdateRequest
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GroupName'
        descriptions:
          $ref: '#/components/schemas/GroupDescriptions'
        status:
          $ref: '#/components/schemas/GroupStatus'
        selfjoin:
          $ref: '#/components/schemas/GroupSelfJoin'
    GroupsGetResponseADM:
      title: GroupsGetResponseADM
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    HealthResponse:
      title: HealthResponse
      type: object
      required:
      - name
      - severity
      - status
      - message
      properties:
        name:
          type: string
        severity:
          type: string
        status:
          type: boolean
        message:
          type: string
    IT:
      title: IT
      type: object
    Inactive:
      title: Inactive
      type: object
    IriPassword:
      title: IriPassword
      type: object
      required:
      - iri
      - password
      properties:
        iri:
          $ref: '#/components/schemas/UserIri'
        password:
          type: string
    Keyword:
      title: Keyword
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Labels:
      title: Labels
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    LanguageCode:
      title: LanguageCode
      oneOf:
      - $ref: '#/components/schemas/DE'
      - $ref: '#/components/schemas/EN'
      - $ref: '#/components/schemas/FR'
      - $ref: '#/components/schemas/IT'
      - $ref: '#/components/schemas/RM'
    ListADM:
      title: ListADM
      type: object
      required:
      - listinfo
      properties:
        listinfo:
          $ref: '#/components/schemas/ListRootNodeInfoADM'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
    ListChangeCommentsRequest:
      title: ListChangeCommentsRequest
      type: object
      required:
      - comments
      properties:
        comments:
          $ref: '#/components/schemas/Comments'
    ListChangeLabelsRequest:
      title: ListChangeLabelsRequest
      type: object
      required:
      - labels
      properties:
        labels:
          $ref: '#/components/schemas/Labels'
    ListChangeNameRequest:
      title: ListChangeNameRequest
      type: object
      required:
      - name
      properties:
        name:
          $ref: '#/components/schemas/ListName'
    ListChangePositionRequest:
      title: ListChangePositionRequest
      type: object
      required:
      - position
      - parentNodeIri
      properties:
        position:
          $ref: '#/components/schemas/Position'
        parentNodeIri:
          $ref: '#/components/schemas/ListIri'
    ListChangeRequest:
      title: ListChangeRequest
      type: object
      required:
      - listIri
      - projectIri
      properties:
        listIri:
          $ref: '#/components/schemas/ListIri'
        projectIri:
          $ref: '#/components/schemas/ProjectIri'
        hasRootNode:
          $ref: '#/components/schemas/ListIri'
        position:
          $ref: '#/components/schemas/Position'
        name:
          $ref: '#/components/schemas/ListName'
        labels:
          $ref: '#/components/schemas/Labels'
        comments:
          $ref: '#/components/schemas/Comments'
    ListChildNodeADM:
      title: ListChildNodeADM
      type: object
      required:
      - id
      - labels
      - comments
      - position
      - hasRootNode
      properties:
        id:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        position:
          type: integer
          format: int32
        hasRootNode:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
    ListChildNodeInfoADM:
      title: ListChildNodeInfoADM
      type: object
      required:
      - id
      - labels
      - comments
      - position
      - hasRootNode
      properties:
        id:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        position:
          type: integer
          format: int32
        hasRootNode:
          type: string
    ListCreateChildNodeRequest:
      title: ListCreateChildNodeRequest
      type: object
      required:
      - labels
      - parentNodeIri
      - projectIri
      properties:
        id:
          $ref: '#/components/schemas/ListIri'
        comments:
          $ref: '#/components/schemas/Comments'
        labels:
          $ref: '#/components/schemas/Labels'
        name:
          $ref: '#/components/schemas/ListName'
        parentNodeIri:
          $ref: '#/components/schemas/ListIri'
        position:
          $ref: '#/components/schemas/Position'
        projectIri:
          $ref: '#/components/schemas/ProjectIri'
    ListCreateRootNodeRequest:
      title: ListCreateRootNodeRequest
      type: object
      required:
      - comments
      - labels
      - projectIri
      properties:
        id:
          $ref: '#/components/schemas/ListIri'
        comments:
          $ref: '#/components/schemas/Comments'
        labels:
          $ref: '#/components/schemas/Labels'
        name:
          $ref: '#/components/schemas/ListName'
        projectIri:
          $ref: '#/components/schemas/ProjectIri'
    ListDeleteResponseADM:
      title: ListDeleteResponseADM
      type: object
      required:
      - iri
      - deleted
      properties:
        iri:
          type: string
        deleted:
          type: boolean
    ListGetResponseADM:
      title: ListGetResponseADM
      type: object
      required:
      - list
      properties:
        list:
          $ref: '#/components/schemas/ListADM'
    ListIri:
      title: ListIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ListItemDeleteResponseADM:
      title: ListItemDeleteResponseADM
      oneOf:
      - $ref: '#/components/schemas/ChildNodeDeleteResponseADM'
      - $ref: '#/components/schemas/ListDeleteResponseADM'
    ListItemGetResponseADM:
      title: ListItemGetResponseADM
      oneOf:
      - $ref: '#/components/schemas/ListGetResponseADM'
      - $ref: '#/components/schemas/ListNodeGetResponseADM'
    ListName:
      title: ListName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ListNodeADM:
      title: ListNodeADM
      oneOf:
      - $ref: '#/components/schemas/ListChildNodeADM'
      - $ref: '#/components/schemas/ListRootNodeADM'
    ListNodeCommentsDeleteResponseADM:
      title: ListNodeCommentsDeleteResponseADM
      type: object
      required:
      - nodeIri
      - commentsDeleted
      properties:
        nodeIri:
          type: string
        commentsDeleted:
          type: boolean
    ListNodeGetResponseADM:
      title: ListNodeGetResponseADM
      type: object
      required:
      - node
      properties:
        node:
          $ref: '#/components/schemas/NodeADM'
    ListResponseDto:
      title: ListResponseDto
      type: object
      required:
      - count
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceInfoDto'
        count:
          type: integer
          format: int32
    ListRootNodeADM:
      title: ListRootNodeADM
      type: object
      required:
      - id
      - projectIri
      - labels
      - comments
      - isRootNode
      properties:
        id:
          type: string
        projectIri:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
        isRootNode:
          type: boolean
    ListRootNodeInfoADM:
      title: ListRootNodeInfoADM
      type: object
      required:
      - id
      - projectIri
      - labels
      - comments
      - isRootNode
      properties:
        id:
          type: string
        projectIri:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        isRootNode:
          type: boolean
    ListsGetResponseADM:
      title: ListsGetResponseADM
      type: object
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListRootNodeInfoADM'
    LoginForm:
      title: LoginForm
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
        password:
          type: string
    LoginPayload:
      title: LoginPayload
      oneOf:
      - $ref: '#/components/schemas/EmailPassword'
      - $ref: '#/components/schemas/IriPassword'
      - $ref: '#/components/schemas/UsernamePassword'
    Logo:
      title: Logo
      type: object
      required:
      - value
      properties:
        value:
          type: string
    LogoutResponse:
      title: LogoutResponse
      type: object
      required:
      - status
      - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
    Longname:
      title: Longname
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Map_Seq_IRI:
      title: Map_Seq_IRI
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    Map_Set_PermissionADM:
      title: Map_Set_PermissionADM
      type: object
      additionalProperties:
        type: array
        uniqueItems: true
        items:
          $ref: '#/components/schemas/PermissionADM'
    NodeADM:
      title: NodeADM
      type: object
      required:
      - nodeinfo
      properties:
        nodeinfo:
          $ref: '#/components/schemas/ListChildNodeInfoADM'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
    NodeInfoGetResponseADM:
      title: NodeInfoGetResponseADM
      oneOf:
      - $ref: '#/components/schemas/ChildNodeInfoGetResponseADM'
      - $ref: '#/components/schemas/RootNodeInfoGetResponseADM'
    NodePositionChangeResponseADM:
      title: NodePositionChangeResponseADM
      type: object
      required:
      - node
      properties:
        node:
          $ref: '#/components/schemas/ListNodeADM'
    NotFoundException:
      title: NotFoundException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    OntologyConstraintException:
      title: OntologyConstraintException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    PagedResponse_Authorship:
      title: PagedResponse_Authorship
      type: object
      required:
      - data
      - pagination
      properties:
        data:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/Pagination'
    PagedResponse_CopyrightHolder:
      title: PagedResponse_CopyrightHolder
      type: object
      required:
      - data
      - pagination
      properties:
        data:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/Pagination'
    PagedResponse_ProjectLicenseDto:
      title: PagedResponse_ProjectLicenseDto
      type: object
      required:
      - data
      - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLicenseDto'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      title: Pagination
      type: object
      required:
      - pageSize
      - totalItems
      - totalPages
      - currentPage
      properties:
        pageSize:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
    Password:
      title: Password
      type: object
      required:
      - value
      properties:
        value:
          type: string
    PasswordChangeRequest:
      title: PasswordChangeRequest
      type: object
      required:
      - requesterPassword
      - newPassword
      properties:
        requesterPassword:
          $ref: '#/components/schemas/Password'
        newPassword:
          $ref: '#/components/schemas/Password'
    PermissionADM:
      title: PermissionADM
      type: object
      required:
      - name
      properties:
        name:
          type: string
        additionalInformation:
          type: string
        permissionCode:
          type: integer
          format: int32
    PermissionCodeAndProjectRestrictedViewSettings:
      title: PermissionCodeAndProjectRestrictedViewSettings
      type: object
      required:
      - permissionCode
      properties:
        permissionCode:
          type: integer
          format: int32
        restrictedViewSettings:
          $ref: '#/components/schemas/ProjectRestrictedViewSettingsADM'
    PermissionDeleteResponseADM:
      title: PermissionDeleteResponseADM
      type: object
      required:
      - permissionIri
      - deleted
      properties:
        permissionIri:
          type: string
        deleted:
          type: boolean
    PermissionGetResponseADM:
      title: PermissionGetResponseADM
      oneOf:
      - $ref: '#/components/schemas/AdministrativePermissionGetResponseADM'
      - $ref: '#/components/schemas/DefaultObjectAccessPermissionGetResponseADM'
    PermissionInfoADM:
      title: PermissionInfoADM
      type: object
      required:
      - iri
      - permissionType
      properties:
        iri:
          type: string
        permissionType:
          type: string
    PermissionsDataADM:
      title: PermissionsDataADM
      type: object
      required:
      - groupsPerProject
      - administrativePermissionsPerProject
      properties:
        groupsPerProject:
          $ref: '#/components/schemas/Map_Seq_IRI'
        administrativePermissionsPerProject:
          $ref: '#/components/schemas/Map_Set_PermissionADM'
    PermissionsForProjectGetResponseADM:
      title: PermissionsForProjectGetResponseADM
      type: object
      properties:
        permissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionInfoADM'
    Position:
      title: Position
      type: object
      required:
      - value
      properties:
        value:
          type: integer
          format: int32
    Project:
      title: Project
      type: object
      required:
      - id
      - shortname
      - shortcode
      - status
      - selfjoin
      properties:
        id:
          $ref: '#/components/schemas/ProjectIri'
        shortname:
          $ref: '#/components/schemas/Shortname'
        shortcode:
          $ref: '#/components/schemas/Shortcode'
        longname:
          $ref: '#/components/schemas/Longname'
        description:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
        keywords:
          type: array
          items:
            type: string
        logo:
          $ref: '#/components/schemas/Logo'
        ontologies:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/Status'
        selfjoin:
          $ref: '#/components/schemas/SelfJoin'
        allowedCopyrightHolders:
          type: array
          uniqueItems: true
          items:
            type: string
        enabledLicenses:
          type: array
          uniqueItems: true
          items:
            type: string
    ProjectAdminMembersGetResponseADM:
      title: ProjectAdminMembersGetResponseADM
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
    ProjectCreateRequest:
      title: ProjectCreateRequest
      type: object
      required:
      - shortname
      - shortcode
      - status
      - selfjoin
      properties:
        id:
          $ref: '#/components/schemas/ProjectIri'
        shortname:
          $ref: '#/components/schemas/Shortname'
        shortcode:
          $ref: '#/components/schemas/Shortcode'
        longname:
          $ref: '#/components/schemas/Longname'
        description:
          type: array
          items:
            $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
        logo:
          $ref: '#/components/schemas/Logo'
        status:
          $ref: '#/components/schemas/Status'
        selfjoin:
          $ref: '#/components/schemas/SelfJoin'
        allowedCopyrightHolders:
          type: array
          uniqueItems: true
          items:
            type: string
        enabledLicenses:
          type: array
          uniqueItems: true
          items:
            type: string
    ProjectExportInfoResponse:
      title: ProjectExportInfoResponse
      type: object
      required:
      - projectShortcode
      - location
      properties:
        projectShortcode:
          type: string
        location:
          type: string
    ProjectGetResponse:
      title: ProjectGetResponse
      type: object
      required:
      - project
      properties:
        project:
          $ref: '#/components/schemas/Project'
    ProjectImportResponse:
      title: ProjectImportResponse
      type: object
      required:
      - location
      properties:
        location:
          type: string
    ProjectIri:
      title: ProjectIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ProjectKeywordsGetResponse:
      title: ProjectKeywordsGetResponse
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
    ProjectLicenseDto:
      title: ProjectLicenseDto
      type: object
      required:
      - id
      - uri
      - labelEn
      - isRecommended
      - isEnabled
      properties:
        id:
          type: string
        uri:
          type: string
        labelEn:
          type: string
        isRecommended:
          type: boolean
        isEnabled:
          type: boolean
    ProjectMembersGetResponseADM:
      title: ProjectMembersGetResponseADM
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
    ProjectOperationResponseADM:
      title: ProjectOperationResponseADM
      type: object
      required:
      - project
      properties:
        project:
          $ref: '#/components/schemas/Project'
    ProjectRestrictedViewSettingsADM:
      title: ProjectRestrictedViewSettingsADM
      type: object
      required:
      - watermark
      properties:
        size:
          type: string
        watermark:
          type: boolean
    ProjectRestrictedViewSettingsGetResponseADM:
      title: ProjectRestrictedViewSettingsGetResponseADM
      type: object
      required:
      - settings
      properties:
        settings:
          $ref: '#/components/schemas/ProjectRestrictedViewSettingsADM'
    ProjectUpdateRequest:
      title: ProjectUpdateRequest
      type: object
      properties:
        longname:
          $ref: '#/components/schemas/Longname'
        description:
          type: array
          items:
            $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
        logo:
          $ref: '#/components/schemas/Logo'
        status:
          $ref: '#/components/schemas/Status'
        selfjoin:
          $ref: '#/components/schemas/SelfJoin'
    ProjectsGetResponse:
      title: ProjectsGetResponse
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    ProjectsKeywordsGetResponse:
      title: ProjectsKeywordsGetResponse
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
    RM:
      title: RM
      type: object
    ResourceInfoDto:
      title: ResourceInfoDto
      type: object
      required:
      - resourceIri
      - creationDate
      - lastModificationDate
      - isDeleted
      properties:
        resourceIri:
          type: string
        creationDate:
          type: string
          format: date-time
        lastModificationDate:
          type: string
          format: date-time
        deleteDate:
          type: string
          format: date-time
        isDeleted:
          type: boolean
    RestrictedViewResponse:
      title: RestrictedViewResponse
      type: object
      properties:
        size:
          $ref: '#/components/schemas/Size'
        watermark:
          $ref: '#/components/schemas/Watermark'
    RootNodeInfoGetResponseADM:
      title: RootNodeInfoGetResponseADM
      type: object
      required:
      - listinfo
      properties:
        listinfo:
          $ref: '#/components/schemas/ListRootNodeInfoADM'
    SelfJoin:
      title: SelfJoin
      oneOf:
      - $ref: '#/components/schemas/CanJoin'
      - $ref: '#/components/schemas/CannotJoin'
    SetRestrictedViewRequest:
      title: SetRestrictedViewRequest
      type: object
      properties:
        size:
          $ref: '#/components/schemas/Size'
        watermark:
          $ref: '#/components/schemas/Watermark'
    Shortcode:
      title: Shortcode
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Shortname:
      title: Shortname
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Size:
      title: Size
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Status:
      title: Status
      oneOf:
      - $ref: '#/components/schemas/Active'
      - $ref: '#/components/schemas/Inactive'
    StatusChangeRequest:
      title: StatusChangeRequest
      type: object
      required:
      - status
      properties:
        status:
          $ref: '#/components/schemas/UserStatus'
    StringLiteralSequenceV2:
      title: StringLiteralSequenceV2
      type: object
      properties:
        stringLiterals:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    StringLiteralV2:
      title: StringLiteralV2
      type: object
      required:
      - value
      properties:
        value:
          type: string
        language:
          type: string
    SystemAdmin:
      title: SystemAdmin
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    SystemAdminChangeRequest:
      title: SystemAdminChangeRequest
      type: object
      required:
      - systemAdmin
      properties:
        systemAdmin:
          $ref: '#/components/schemas/SystemAdmin'
    TokenResponse:
      title: TokenResponse
      type: object
      required:
      - token
      properties:
        token:
          type: string
    UserCreateRequest:
      title: UserCreateRequest
      type: object
      required:
      - username
      - email
      - givenName
      - familyName
      - password
      - status
      - lang
      - systemAdmin
      properties:
        id:
          $ref: '#/components/schemas/UserIri'
        username:
          $ref: '#/components/schemas/Username'
        email:
          type: string
          pattern: ^.+@.+$
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        password:
          $ref: '#/components/schemas/Password'
        status:
          $ref: '#/components/schemas/UserStatus'
        lang:
          $ref: '#/components/schemas/LanguageCode'
        systemAdmin:
          $ref: '#/components/schemas/SystemAdmin'
    UserDto:
      title: UserDto
      type: object
      required:
      - id
      - username
      - email
      - givenName
      - familyName
      - status
      - lang
      - permissions
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        status:
          type: boolean
        lang:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        permissions:
          $ref: '#/components/schemas/PermissionsDataADM'
    UserGroupMembershipsGetResponseADM:
      title: UserGroupMembershipsGetResponseADM
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    UserIri:
      title: UserIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    UserProjectAdminMembershipsGetResponseADM:
      title: UserProjectAdminMembershipsGetResponseADM
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    UserProjectMembershipsGetResponseADM:
      title: UserProjectMembershipsGetResponseADM
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    UserResponse:
      title: UserResponse
      type: object
      required:
      - user
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
    UserStatus:
      title: UserStatus
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    Username:
      title: Username
      type: object
      required:
      - value
      properties:
        value:
          type: string
    UsernamePassword:
      title: UsernamePassword
      type: object
      required:
      - username
      - password
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          type: string
    UsersResponse:
      title: UsersResponse
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
    ValidationException:
      title: ValidationException
      type: object
      required:
      - msg
      properties:
        msg:
          type: string
    ValidationFormData:
      title: ValidationFormData
      type: object
      required:
      - data.ttl
      - shacl.ttl
      properties:
        data.ttl:
          description: The data to be validated.
          type: string
          format: binary
        shacl.ttl:
          description: The shapes for validation.
          type: string
          format: binary
        validateShapes:
          description: Should shapes also be validated.
          type: boolean
        reportDetails:
          description: Add `sh:details` to the validation report.
          type: boolean
        addBlankNodes:
          description: Add blank nodes to the validation report.
          type: boolean
    VersionResponse:
      title: VersionResponse
      type: object
      required:
      - webapi
      - buildCommit
      - buildTime
      - fuseki
      - scala
      - sipi
      - name
      properties:
        webapi:
          type: string
        buildCommit:
          type: string
        buildTime:
          type: string
        fuseki:
          type: string
        scala:
          type: string
        sipi:
          type: string
        name:
          type: string
    Watermark:
      title: Watermark
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
    httpAuth1:
      type: http
      scheme: basic
