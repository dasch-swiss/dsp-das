@use "sass:math";

$black: rgb(11, 11, 11);
$black-12-opacity: rgba($black, .12);
$black-14-opacity: rgba($black, .14);
$black-20-opacity: rgba($black, .2);
$black-60-opacity: rgba($black, .6);

$white: rgb(244, 244, 244);

$border-color: #ebebeb;

@mixin background-cover($attachment: scroll, $image: linear-gradient($black-20-opacity, $black-20-opacity)) {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
  background-attachment: $attachment;
  background-image: $image;
  position: relative;
}

@mixin font-smoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Text Shadow
@mixin text-shadow() {
  text-shadow: 0 0 4px $black, -1px -1px $black-60-opacity, 1px 1px $black-60-opacity;
}

// Box Shadow
@mixin box-shadow($x: 0, $y: 1px, $blur: 3px, $alpha: .5) {
  box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
}

@mixin box-shadow-bottom($x: 0, $y: 5px, $blur: 6px, $side: -6px, $alpha: .5) {
  box-shadow: $x $y $blur $side rgba(0, 0, 0, $alpha);
}

@mixin mat-box-shadow-deep() {
  //  box-shadow: 0 5px 5px -3px $black-20-opacity, 0 8px 10px 1px $black-14-opacity, 0 3px 14px 2px $black-12-opacity;
  box-shadow: 0 3px 5px -1px $black-20-opacity, 0 6px 10px 0 $black-14-opacity, 0 1px 18px 0 $black-12-opacity;
}

@mixin mat-box-shadow-flat() {
  box-shadow: 0 2px 2px $black-20-opacity, 0 0 2px $black-12-opacity;
}

@mixin border-top() {
  border-top: 1px solid $border-color;
}

@mixin border-right() {
  border-right: 1px solid $border-color;
}

@mixin border-bottom() {
  border-bottom: 1px solid $border-color;
}

@mixin border-left() {
  border-left: 1px solid $border-color;
}

@mixin border() {
  border: 1px solid $border-color;
}

@mixin rel-viewheight($h1: 0, $h2: 0, $h3: 0) {
  // $minus: $h1 + $h2 + $h3 + px;
  // height: calc(100vh - $minus);
}


// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return math.div(round($number * $n), $n);
  } @else if $mode == ceil {
    @return math.div(ceil($number * $n), $n);
  } @else if $mode == floor {
    @return math.div(floor($number * $n), $n);
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil ($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

